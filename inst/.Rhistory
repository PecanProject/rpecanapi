ping(server)
curl -X GET "https://pecan-dev.ncsa.illinois.edu/api/ping" -H  "accept: application/json"
ping(server)
library(rpecanapi)
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
ping(server)
op_default <- knitr::opts_chunk$get(default = TRUE)
knitr::opts_chunk$set(op_default)
# install.packages("devtools")
devtools::install_github("bd-R/bdmonitor")
1
build_dashboard()
library(bdmonitor)
bdmonitor::build_dashboard()
devtools::install_github("bd-R/bdmonitor")
install.packages("bdchecks")
valueBox("[pkg:Master] - [dep:Master]", color = "primary")
library(flexdashboard)
valueBox("[pkg:Master] - [dep:Master]", color = "primary")
valueBox("Trigger all bdverse pkgs",
icon = "fa-circle-notch",
href="https://github.com/bd-R/bdverse/actions",
color = "info")
library(flexdashboard)
#'
#' @importFrom rmarkdown render
#'
#' @return  Prints R Markdown dashboard in HTML
#'
#'@examples
#' build_dashboard()
#'
#' @export
#'
build_dashboard <- function() {
dashboard_path <- "inst/rmd/bdmonitor_dashboard.Rmd"
if (file.exists(dashboard_path)) {
rmarkdown::render(dashboard_path,  encoding = 'UTF-8', output_dir = "docs/");
}
}
#'
#' @importFrom rmarkdown render
#'
#' @return  Prints R Markdown dashboard in HTML
#'
#'@examples
#' build_dashboard()
#'
#' @export
#'
build_dashboard <- function() {
dashboard_path <- "inst/rmd/bdmonitor_dashboard.Rmd"
if (file.exists(dashboard_path)) {
rmarkdown::render(dashboard_path,  encoding = 'UTF-8', output_dir = "docs/");
}
}
source('~/Projects/bdmonitor/R/build_dashboard.R')
#'
#' @importFrom rmarkdown render
#'
#' @return  Prints R Markdown dashboard in HTML
#'
#'@examples
#' build_dashboard()
#'
#' @export
#'
build_dashboard <- function() {
dashboard_path <- "inst/rmd/bdmonitor_dashboard.Rmd"
if (file.exists(dashboard_path)) {
rmarkdown::render(dashboard_path,  encoding = 'UTF-8', output_dir = "docs/");
}
}
install.packages("bdchecks")
install.packages("jqr")
'install.packages(c("jqr"), "/usr/local/lib/R/site-library"
)
q
exit()
.
install.packages("bdchecks")
install.packages("bdchecks", dependencies=TRUE)
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
ping <- function(server){
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
View(ping)
q
hvfv
exit()
l
ygv
5356
res <- httr::GET(paste0(server$url, "/api/ping/"))
return(res)
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
ping <- function(server){
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
##' Pings the PEcAn API server (using the URL passed in the server object)
##' to see if it is live or not. Hits the `/api/ping` API endpoint
##'
##' @name ping
##' @title Pings the PEcAn API server to see if it is live
##' @param server Server object obtained using the connect() function
##' @return Response obtained from the `/api/ping` endpoint
##' @author Tezan Sahu
##' @export
##' @examples
##' server <- connect(url="http://localhost:8000", username="carya", password="illinois")
##' res <- ping(server)
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
ping <- function(server){
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else{
stop("Sorry! Server not.")
}
},
error = function(e) {
message('Sorry! Server not res.')
return(e)
}
)
}
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
View(server)
exit()
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
ping <- function(server){
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else{
stop("Sorry! Server not.")
}
},
error = function(e) {
message('Sorry! Server not res.')
return(e)
}
)
}
ping()
res
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
res
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 400){
return("xyz")
}
res
ping()
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 404){
return("xyz")
}
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 404){
message("xyz")
}
res <- httr::GET(paste0(server$url, "/api/ping/"))
if(res$status_code == 404){
message("xyz")
}
server <- connect(url="http://localhost:8000", username="carya", password="illinois")
View(server)
server <- connect("http://141.142.216.73", "ashiklom", "admin")
# List all available models
models <- GET(
file.path(server$url, "api"),
authenticate(server$user, server$password)
) %>% content() %>%
bind_rows()
server <- connect("http://141.142.216.73", "ashiklom", "admin")
# List all available models
models <- GET(
file.path(server$url, "api", "availableModels/"),
authenticate(server$user, server$password)
) %>% content() %>%
bind_rows()
library(dplyr)
library(stats)
#* Obtain the encrypted password for a user
#* @param username Username, which is also the 'salt'
#* @param password Unencrypted password
#* @param secretkey Secret Key, which if null, is set to 'notasecret'
#* @return Encrypted password
#* @author Tezan Sahu
get_crypt_pass <- function(username, password, secretkey = NULL) {
secretkey <- if(is.null(secretkey)) "notasecret" else secretkey
dig <- secretkey
salt <- username
for (i in 1:10) {
dig <- digest::digest(
paste(dig, salt, password, secretkey, sep="--"),
algo="sha1",
serialize=FALSE
)
}
return(dig)
}
#* Check if the encrypted password for the user is valid
#* @param username Username
#* @param crypt_pass Encrypted password
#* @param dbcon Database connection object. Default is global database pool.
#* @return TRUE if encrypted password is correct, else FALSE
#* @author Tezan Sahu
validate_crypt_pass <- function(username, crypt_pass, dbcon = global_db_pool) {
res <- tbl(dbcon, "users") %>%
filter(login == username,
crypted_password == crypt_pass) %>%
collect()
if (nrow(res) == 1) {
return(res$id)
}
return(NA)
}
#* Filter to authenticate a user calling the PEcAn API
#* @param req The request
#* @param res The response to be set
#* @return Appropriate response
#* @author Tezan Sahu
authenticate_user <- function(req, res) {
# Fix CORS issues
res$setHeader("Access-Control-Allow-Origin", "*")
# If the API endpoint that do not require authentication
if (
Sys.getenv("AUTH_REQ") == FALSE ||
grepl("swagger", req$PATH_INFO, ignore.case = TRUE) ||
grepl("openapi.json", req$PATH_INFO, fixed = TRUE) ||
grepl("/api/ping", req$PATH_INFO, ignore.case = TRUE) ||
grepl("/api/status", req$PATH_INFO, ignore.case = TRUE))
{
req$user$userid <- NA
req$user$username <- ""
return(plumber::forward())
}
if (!is.null(req$HTTP_AUTHORIZATION)) {
# HTTP_AUTHORIZATION is of the form "Basic <base64-encoded-string>",
# where the <base64-encoded-string> is contains <username>:<password>
auth_details <- strsplit(rawToChar(jsonlite::base64_dec(strsplit(req$HTTP_AUTHORIZATION, " +")[[1]][2])), ":")[[1]]
username <- auth_details[1]
password <- auth_details[2]
crypt_pass <- get_crypt_pass(username, password)
userid <- validate_crypt_pass(username, crypt_pass)
if(! is.na(userid)){
req$user$userid <- userid
req$user$username <- username
return(plumber::forward())
}
}
res$status <- 401 # Unauthorized
return(list(error="Authentication required"))
}
models <- GET(
file.path(server$url, "api", "availableModels/"),
authenticate(server$user, server$password)
) %>% content() %>%
bind_rows()
# Modify for your target machine and authentication
server <- connect("http://141.142.216.73", "ashiklom", "admin")
# List all available models
models <- GET(
file.path(server$url, "api", "availableModels/"),
authenticate(server$user, server$password)
) %>% content() %>%
bind_rows()
##' Obtain general information about PEcAn & the details of the database host
##' Hits the `/api/status` API endpoint
##'
##' @name get.status
##' @title Gets general information about PEcAn & the details of the database host
##' @param server Server object obtained using the connect() function
##' @return Response obtained from the `/api/status` endpoint
##' @author Tezan Sahu
##' @export
##' @examples
##' server <- connect(url="http://localhost:8000", username="carya", password="illinois")
##' res <- get.status(server)
get.status <- function(server){
res <- NULL
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/status"))
},
error = function(e) {
message("Sorry! Server not responding.")
}
)
if(! is.null(res)) {
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else if(res$status_code == 500){
stop("Internal server error")
}
else{
stop("Unidentified error")
}
}
}
get.status()
##' Obtain general information about PEcAn & the details of the database host
##' Hits the `/api/status` API endpoint
##'
##' @name get.status
##' @title Gets general information about PEcAn & the details of the database host
##' @param server Server object obtained using the connect() function
##' @return Response obtained from the `/api/status` endpoint
##' @author Tezan Sahu
##' @export
##' @examples
##' server <- connect(url="http://localhost:8000", username="carya", password="illinois")
##' res <- get.status(server)
get.status <- function(server){
res <- NULL
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/status"))
},
error = function(e) {
message("Sorry! Server not respg.")
}
)
if(! is.null(res)) {
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else if(res$status_code == 500){
stop("Internal server error")
}
else{
stop("Unidentified error")
}
}
}
get.status()
ping()
ping <- function(server){
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/ping"))
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else{
stop("Sorry! Server not responding.")
}
},
error = function(e) {
message('Sorry! Server not responding.')
}
)
}
ping()
get.status()
##' Obtain general information about PEcAn & the details of the database host
##' Hits the `/api/status` API endpoint
##'
##' @name get.status
##' @title Gets general information about PEcAn & the details of the database host
##' @param server Server object obtained using the connect() function
##' @return Response obtained from the `/api/status` endpoint
##' @author Tezan Sahu
##' @export
##' @examples
##' server <- connect(url="http://localhost:8000", username="carya", password="illinois")
##' res <- get.status(server)
get.status <- function(server){
res <- NULL
tryCatch(
expr = {
res <- httr::GET(paste0(server$url, "/api/status"))
},
error = function(e) {
message("Sorry! Server not responding.")
}
)
if(! is.null(res)) {
if(res$status_code == 200){
return(jsonlite::fromJSON(rawToChar(res$content)))
}
else if(res$status_code == 500){
stop("Internal server error")
}
else{
stop("Unidentified error")
}
}
}
get.status()
ping()
./web/workflow.R --settings pecan.ed.xml
../web/workflow.R --settings pecan.ed.xml
# ----------------------------------------------------------------------
# Load required libraries
# ----------------------------------------------------------------------
library("PEcAn.all")
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
install.packages(Bioconductor)
install.packages("graph)
""
"
install.packages("Bioconductor")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
source("https://bioconductor.org/biocLite.R")
biocLite("graph")
BiocManager::install("graph")
install.packages("ncdf4")
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("pkgload")
install.packages("devtools")
install.packages("https://github.com/PecanProject/pecan/tree/develop/base")
install.packages("dplyr")
.libPaths()
old_packages <- installed.packages(lib.loc = "/home/akhil/R/x86_64-pc-linux-gnu-library/3.6/Resources/library")
old_packages <- as.data.frame(old_packages)
list.of.packages <- unlist(old_packages$Package)
remove.packages( installed.packages( priority = "NA" )[,1] )
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages,function(x){library(x,character.only=TRUE)})
list()
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
remove.packages("dplyr", lib="/usr/local/lib/R/site-library")
install.packages("dplyr")
remove.packages("rlang", lib="/usr/local/lib/R/site-library")
install.packages("rlang")
install.packages("dplyr")
remove.packages("vctrs", lib="/usr/local/lib/R/site-library")
install.packages("vctrs")
install.packages("dplyr")
remove.packages("R6", lib="/usr/local/lib/R/site-library")
install.packages("R6")
install.packages("dplyr")
install.packages("generics")
install.packages("dplyr")
install.packages("glue")
install.packages("dplyr")
install.packages("lifecycle")
install.packages("dplyr")
install.packages("devtools")
install.packages("usethis")
install.packages("fs")
install.packages("usethis")
install.packages("purrr")
.libPaths()
.libPaths()
.libPaths()
install.packages(devtools)
install.packages("yaml")
library(ape)
update.packages(..., checkBuilt=TRUE)
remove.packages( installed.packages( priority = "NA" )[,1] )
update.packages(checkBuilt = T, ask = F)
remove.packages("devtools", lib="/usr/local/lib/R/site-library")
devtools::install_github("r-lib/devtools")
install.packages("devtools")
library(boot, lib.loc = "/usr/lib/R/library")
library(rpecanapi)
library(PEcAn.remote)
quit()
which R
quit()
quit()
which R
Sys.getenv()
Sys.getenv("R")
install.packages("ncdf4")
devtools::install_local("/home/akhil/Downloads/rgdal_1.5-23.tar.gz")
library(ssh)
ssh_connect("theakhiljha@pecan-akhil.ncsa.illinois.edu", Akhiljha@12)
ssh_connect("theakhiljha@pecan-akhil.ncsa.illinois.edu")
View(libssh_version)
View(scp_download)
library(rpecanapi)
ssh
ssh_info()
ssh_disconnect()
ssh_connect("theakhiljha@pecan-akhil.ncsa.illinois.edu", Akhiljha@12)
ssh_connect("theakhiljha@pecan-akhil.ncsa.illinois.edu")
ssh_info(\)
ssh_info()
models
model()
PEcAn.visualization::plot_netcdf()
PEcAn.DB::betyConnect()
View(ping)
setwd("~/Personal/GSOC/rpecanapi/inst")
